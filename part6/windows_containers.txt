Windows, kullanıcılarının oluşturabileceği dört temel container image tipi sunar. 
Her image tipi, Windows işletim sisteminin farklı boyutta ve farklı miktarda Windows API seti taşıyan halidir

----
Windows Server Core: Supports Traditional .Net Framework Applications | https://hub.docker.com/_/microsoft-windows-servercore
Nano Server: Built for .Net Core Applications. | https://hub.docker.com/_/microsoft-windows-nanoserver
Windows: Provides the full Windows Api set. | https://hub.docker.com/_/microsoft-windows
Windows IoT Core: Purpose-built for IoT applications. | https://hub.docker.com/_/microsoft-windows-iotcore
-----

Hangi image hangi iş için uygun?
• Uygulamanız için tam .NET framework gerekiyor mu? Bu sorunun cevabı evet ise, Windows Server Core'u hedeflemelisiniz.
• .NET Core tabanlı bir Windows uygulaması mı oluşturuyorsunuz? Bu sorunun cevabı evet ise, Nanoserver'ı hedeflemelisiniz.
• IoT uygulaması mı oluşturuyorsunuz? Bu sorunun cevabı evet ise, IoT Core'u hedeflemelisiniz.
• Windows Server Core image'inde uygulamanızın ihtiyaç duyduğu bir kütüphane ya da dependency eksik mi? Bu sorunun cevabı evet ise, Windows'u hedeflemeye çalışmalısınız. Bu image diğer temel image'lerden çok daha büyüktür, ancak çekirdek Windows kitaplıklarının çoğunu (GDI kitaplığı gibi) taşır.
-----------------------------------------------------
Bir .Net Framework veya .Net Core tabanlı bir uygulamayı veya bir web uygulaması için IIS'yi mi kullanmak istiyorsunuz?
O zaman Server Core alıp üstüne bu araçları yüklemekle boşuna vakit kaybetmeyin. 
Microsoft temelde .net yüklü olan hem .Net Framework hem de .Net Core temel image'lerini (hem SDK hem de Runtime) yayınlar. Kendi .net image'lerinizi sıfırdan oluşturmak yerine her zaman bu dotnet temel image'lerini kullanın.

 .NET Framework:
-	.NET Framework SDK | https://hub.docker.com/_/microsoft-dotnet-framework-sdk/
-	.NET Framework Runtime | https://hub.docker.com/_/microsoft-dotnet-framework-runtime/
-	ASP.NET Web Forms and MVC | https://hub.docker.com/_/microsoft-dotnet-framework-aspnet/
-	Windows Communication Foundation (WCF) | https://hub.docker.com/_/microsoft-dotnet-framework-wcf/
.NET Core:
-	.NET Core SDK | https://hub.docker.com/_/microsoft-dotnet-core-sdk/
-	.NET Core Runtime | https://hub.docker.com/_/microsoft-dotnet-core/
-	ASP.NET Core Runtime | https://hub.docker.com/_/microsoft-dotnet-core-aspnet/
IIS
-	Server Core IIS | https://hub.docker.com/_/microsoft-windows-servercore-iis
---------------------------------------------------------
Windows, container işletim sistemi sürümünün host işletim sistemi sürümüyle eşleşmesini gerektirir. Daha yeni bir Windows derlemesine dayalı bir container çalıştırmak istiyorsanız, eşdeğer bir ana makine derlemesine sahip olduğunuzdan emin olun. Örneğin, ana bilgisayar Windows Server 2019 ise ve Server Core image'ini kullanmak istiyorsanız, image'iniz mcr.microsoft.com/windows/servercore:ltsc2019 olmalıdır. Ancak, host makineniz Windows Server 2019 ise, image'iniz mcr.microsoft.com/windows/servercore:ltsc2016 olmalıdır. 
---------------------------------------------------------
Escape yönergesi, Dockerfile'daki karakterlerden kaçmak için kullanılan karakteri ayarlar. Belirtilmezse, varsayılan kaçış karakteri ters eğik çizgi \ olur. Kaçış karakterini backsitck `olarak ayarlamak özellikle Windows'ta kullanışlıdır, burada \ dizin yolu ayırıcısıdır.  
Dockerfile (# escape=`) komutuyla başlamalıdır. Bu, backstick'i bir kaçış karakteri olarak tanımlayacaktır ve ters eğik çizgi karakterini Dockerfile'da bir dosya yolu olarak kullanabileceğiz.
---------------------------------------------------------
Shell ile ilgili uyumsuzlukları önlemek için PowerShell'i varsayılan shell olarak ayarlayın. 
Dockerfile dosyanızdaki aşağıdaki talimatı kullanın. (P.S. Powershell, Nanoserver temel image'ine dahil değildir)
SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop';"]
